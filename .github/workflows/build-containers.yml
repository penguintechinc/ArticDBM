name: Build Multi-Architecture Containers

on:
  push:
    branches: ['**']
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  PROXY_IMAGE_NAME: ${{ github.repository }}/proxy
  MANAGER_IMAGE_NAME: ${{ github.repository }}/manager

jobs:
  build-proxy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from .version file
        id: version
        run: |
          VERSION=$(cat .version | tr -d '\n')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Extract metadata for proxy
        id: meta-proxy
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROXY_IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-alpha
            type=ref,event=pr,suffix=-alpha
            type=raw,value=beta,enable={{is_default_branch}}
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}
            type=raw,value=${{ steps.version.outputs.version }},enable=${{ github.event_name == 'release' }}

      - name: Build and push proxy image
        uses: docker/build-push-action@v5
        with:
          context: ./proxy
          file: ./proxy/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-proxy.outputs.tags }}
          labels: ${{ steps.meta-proxy.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-manager:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from .version file
        id: version
        run: |
          VERSION=$(cat .version | tr -d '\n')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Extract metadata for manager
        id: meta-manager
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.MANAGER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-alpha
            type=ref,event=pr,suffix=-alpha
            type=raw,value=beta,enable={{is_default_branch}}
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}
            type=raw,value=${{ steps.version.outputs.version }},enable=${{ github.event_name == 'release' }}

      - name: Build and push manager image
        uses: docker/build-push-action@v5
        with:
          context: ./manager
          file: ./manager/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-manager.outputs.tags }}
          labels: ${{ steps.meta-manager.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-summary:
    runs-on: ubuntu-latest
    needs: [build-proxy, build-manager]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from .version file
        id: version
        run: |
          VERSION=$(cat .version | tr -d '\n')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Summary
        run: |
          echo "## 🚀 ArticDBM Container Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Container Images Built" >> $GITHUB_STEP_SUMMARY
          echo "- **Proxy**: \`${{ env.REGISTRY }}/${{ env.PROXY_IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Manager**: \`${{ env.REGISTRY }}/${{ env.MANAGER_IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Architectures" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "### 🏷️ Tags Applied" >> $GITHUB_STEP_SUMMARY
            echo "- \`beta\` (main branch)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "### 🏷️ Tags Applied" >> $GITHUB_STEP_SUMMARY
            echo "- \`latest\` (release)" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ steps.version.outputs.version }}\` (version)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🏷️ Tags Applied" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ github.ref_name }}-alpha\` (feature branch)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Usage Examples" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Pull latest release" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.PROXY_IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.MANAGER_IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Or specific version" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.PROXY_IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.MANAGER_IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Pull beta build from main branch" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.PROXY_IMAGE_NAME }}:beta" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.MANAGER_IMAGE_NAME }}:beta" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Pull alpha build from feature branch" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.PROXY_IMAGE_NAME }}:${{ github.ref_name }}-alpha" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.MANAGER_IMAGE_NAME }}:${{ github.ref_name }}-alpha" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
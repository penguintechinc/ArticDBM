- This application is called Artic Database Manager, or Artic DBM for short. It is 
- create a docker container with a go proxy which can intercept and send SQL queries for MYSQL, MSSQL, Redis, MongoDB, and Postgresql. It should should support TLS or non-TLS modes. 
- create a py4web docker manager container which allow for rules to be configured for the proxy, rules include: authorize user to database and table and whether that action is allowed to be Read and/or write (x user can access y tables in z database with action Read). It implements the user management capabilities built into py4web for general user management. Additionally this manager allows you to add database servers as write and/or read with details on the down stream. It will keep a cache of user permissions in Redis to ensure faster speeds and implement multi-thread / async to ensure performance. It will utilize PyDAL for it's configuration backend management to keep things like user and persistent config, defaulting to Postgresql.
- Update the goproxy to handle and implement the configuration from the manager
- Build a unit test into a docker-compose with these two containers, a redis and postgresql database server for the manager, and a test mysql and postgresql server for the proxy to sit in front of
- The go proxy have an optional security check module which looks for common signs of SQL injection in the queries
- The go proxy should be extremely performant as it is proxying latency sensitive requests
- The go proxy should prefer read nodes for read requests and round robing them
- The go proxy should have it's own Redis server and pull new config from manager randomly between 45 and 75 seconds
- The go proxy should be able to share the Redis server in between multiple go proxies in a cluster with an NLB ahead of it
- The go proxy should be able to support GCP and AWS PaaS databases such as RDS and Aurora as backends as well
- in the top level folder docs/ create usage, release notes, contributing, architecture, and AGPL3 license documents as well as any other technical deep dive docs you can think of. Be sure to use colors, icons, etc. to spruce it up!
- At the top of the README.md add some ascii art about Artic Database Manager and update the README with a brief overview and links to deeper documents in docs/
- Create an initial CLAUDE.md with all of this context
- Create a website in website/ using nodejs which can be deployed to cloudflare pages at articdbm.penguintech.io using cooler colors to remind someone they are in the artic winter. Do not create fake testimonials or social media links, we can add these later
- Make the docs/ folder into a mkdocs site for cloudflare pages
- update .version with the text v1.0.0 and update the release notes in docs/
- commit and push changes to git 